/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AreasClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets all areas
     * @return OK
     */
    getAll(): Promise<AreaInfoViewModel[]> {
        let url_ = this.baseUrl + "/dwapi/content/areas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<AreaInfoViewModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AreaInfoViewModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaInfoViewModel[]>(<any>null);
    }

    /**
     * Gets an area by id
     * @param id Id of the area
     * @return OK
     */
    getById(id: number): Promise<AreaInfoViewModel> {
        let url_ = this.baseUrl + "/dwapi/content/areas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<AreaInfoViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AreaInfoViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaInfoViewModel>(<any>null);
    }
}

export class GroupsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param parentId (optional) 
     * @param shopId (optional) 
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param fieldSettings (optional) The product field settings
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getAll(parentId: string | null | undefined, shopId: string | null | undefined, mediaSettings: MediaViewModelSettings | null | undefined, fieldSettings: FieldValueViewModelSetting | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<ProductGroupViewModel[] | null> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/groups?";
        if (parentId !== undefined && parentId !== null)
            url_ += "ParentId=" + encodeURIComponent("" + parentId) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (fieldSettings !== undefined && fieldSettings !== null)
            url_ += "FieldSettings=" + encodeURIComponent("" + fieldSettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ProductGroupViewModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductGroupViewModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductGroupViewModel[] | null>(<any>null);
    }

    /**
     * @param productSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param groupSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param facetGroupSettings (optional) Configures how the facetgroups view should be configured, if they are used to fill the list.
     * @param parameters (optional) Additional parameters to be used for the creation of the product list.
     * @param pageSize (optional) Limits the number of products in the returned view
     * @param currentPage (optional) Defines which page of the paginated resultset to return. Eg. PageSize of 10 and CurrentPage of 2 in a resultset of 30, returns result item #11 to #20.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getGroup(groupId: string | null, productSettings: ProductViewModelSettings | null | undefined, groupSettings: ProductGroupViewModelSettings | null | undefined, facetGroupSettings: FacetGroupViewModelSettings | null | undefined, parameters: { [key: string]: string; } | null | undefined, pageSize: number | undefined, currentPage: number | undefined, mediaSettings: MediaViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<ProductGroupViewModel | null> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/groups/{groupId}?";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        if (productSettings !== undefined && productSettings !== null)
            url_ += "ProductSettings=" + encodeURIComponent("" + productSettings) + "&";
        if (groupSettings !== undefined && groupSettings !== null)
            url_ += "GroupSettings=" + encodeURIComponent("" + groupSettings) + "&";
        if (facetGroupSettings !== undefined && facetGroupSettings !== null)
            url_ += "FacetGroupSettings=" + encodeURIComponent("" + facetGroupSettings) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "Parameters=" + encodeURIComponent("" + parameters) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (currentPage === null)
            throw new Error("The parameter 'currentPage' cannot be null.");
        else if (currentPage !== undefined)
            url_ += "CurrentPage=" + encodeURIComponent("" + currentPage) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGroup(_response);
        });
    }

    protected processGetGroup(response: Response): Promise<ProductGroupViewModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductGroupViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductGroupViewModel | null>(<any>null);
    }
}

export class NavigationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets a navigation for a given area.
     * @param areaId Id of the area
     * @param pageId (optional) Id of the page
     * @param expandMode (optional) Gets or sets the expand mode for the navigation.
     * @param startLevel (optional) Gets or sets the node level from which the navigation nodes should be included.
     * @param stopLevel (optional) Gets or sets the node level to which the navigation nodes should be included.
     * @param rootAreaId (optional) Gets or sets the id of the area (webiste) which should be the root of the navigation.
     * @param rootPageId (optional) Gets or sets the id of the page which should be the root of the navigation.
     * @param rootNavigationTag (optional) Gets or sets the navigation tag of the page which should be the root of the navigation.
     * @param parameters (optional) Gets or sets a collection of custom parameters (provided in the template).
     * @return OK
     */
    getById(areaId: number, pageId: number | undefined, expandMode: ExpandMode | undefined, startLevel: number | undefined, stopLevel: number | undefined, rootAreaId: number | undefined, rootPageId: number | undefined, rootNavigationTag: string | null | undefined, parameters: { [key: string]: any; } | null | undefined): Promise<NavigationTreeViewModel> {
        let url_ = this.baseUrl + "/dwapi/frontend/navigations/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (pageId === null)
            throw new Error("The parameter 'pageId' cannot be null.");
        else if (pageId !== undefined)
            url_ += "pageId=" + encodeURIComponent("" + pageId) + "&";
        if (expandMode === null)
            throw new Error("The parameter 'expandMode' cannot be null.");
        else if (expandMode !== undefined)
            url_ += "ExpandMode=" + encodeURIComponent("" + expandMode) + "&";
        if (startLevel === null)
            throw new Error("The parameter 'startLevel' cannot be null.");
        else if (startLevel !== undefined)
            url_ += "StartLevel=" + encodeURIComponent("" + startLevel) + "&";
        if (stopLevel === null)
            throw new Error("The parameter 'stopLevel' cannot be null.");
        else if (stopLevel !== undefined)
            url_ += "StopLevel=" + encodeURIComponent("" + stopLevel) + "&";
        if (rootAreaId === null)
            throw new Error("The parameter 'rootAreaId' cannot be null.");
        else if (rootAreaId !== undefined)
            url_ += "RootAreaId=" + encodeURIComponent("" + rootAreaId) + "&";
        if (rootPageId === null)
            throw new Error("The parameter 'rootPageId' cannot be null.");
        else if (rootPageId !== undefined)
            url_ += "RootPageId=" + encodeURIComponent("" + rootPageId) + "&";
        if (rootNavigationTag !== undefined && rootNavigationTag !== null)
            url_ += "RootNavigationTag=" + encodeURIComponent("" + rootNavigationTag) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "Parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<NavigationTreeViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <NavigationTreeViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NavigationTreeViewModel>(<any>null);
    }
}

export class PagesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets pages by query
     * @param areaId (optional) 
     * @param pageId (optional) 
     * @param itemType (optional) 
     * @return OK
     */
    getAll(areaId: number | null | undefined, pageId: number | null | undefined, itemType: string | null | undefined): Promise<PageInfoViewModel[]> {
        let url_ = this.baseUrl + "/dwapi/content/pages?";
        if (areaId !== undefined && areaId !== null)
            url_ += "AreaId=" + encodeURIComponent("" + areaId) + "&";
        if (pageId !== undefined && pageId !== null)
            url_ += "PageId=" + encodeURIComponent("" + pageId) + "&";
        if (itemType !== undefined && itemType !== null)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<PageInfoViewModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PageInfoViewModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PageInfoViewModel[]>(<any>null);
    }

    /**
     * Gets a page by id
     * @param id Id of the page
     * @return OK
     */
    getById(id: number): Promise<PageInfoViewModel> {
        let url_ = this.baseUrl + "/dwapi/content/pages/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<PageInfoViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PageInfoViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PageInfoViewModel>(<any>null);
    }
}

export class PageViewsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    getById(id: number): Promise<PageViewModel> {
        let url_ = this.baseUrl + "/dwapi/frontend/pageviews/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<PageViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PageViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PageViewModel>(<any>null);
    }
}

export class ParagraphsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets paragraphs by query
     * @param areaId (optional) 
     * @param pageId (optional) 
     * @param itemType (optional) 
     * @return OK
     */
    getAll(areaId: number | null | undefined, pageId: number | null | undefined, itemType: string | null | undefined): Promise<ParagraphInfoViewModel[]> {
        let url_ = this.baseUrl + "/dwapi/content/paragraphs?";
        if (areaId !== undefined && areaId !== null)
            url_ += "AreaId=" + encodeURIComponent("" + areaId) + "&";
        if (pageId !== undefined && pageId !== null)
            url_ += "PageId=" + encodeURIComponent("" + pageId) + "&";
        if (itemType !== undefined && itemType !== null)
            url_ += "ItemType=" + encodeURIComponent("" + itemType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ParagraphInfoViewModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ParagraphInfoViewModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParagraphInfoViewModel[]>(<any>null);
    }

    /**
     * Gets a paragraph by id
     * @param id Id of the paragraph
     * @return OK
     */
    getById(id: number): Promise<ParagraphInfoViewModel> {
        let url_ = this.baseUrl + "/dwapi/content/paragraphs/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ParagraphInfoViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ParagraphInfoViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParagraphInfoViewModel>(<any>null);
    }
}

export class PaymentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Captures the order with specified Id and amount.
     * @param orderid The order Id.
     * @param amount The amount to capture.
     * @return Returns  with operation info serialized to JSON.
     */
    capture(orderid: string | null, amount: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/capture?";
        if (orderid === undefined)
            throw new Error("The parameter 'orderid' must be defined.");
        else if(orderid !== null)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        if (amount === undefined || amount === null)
            throw new Error("The parameter 'amount' must be defined and cannot be null.");
        else
            url_ += "amount=" + encodeURIComponent("" + amount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCapture(_response);
        });
    }

    protected processCapture(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Proceeds a return operation for order with specified Id.
     * @param orderid The order Id.
     * @param amount The amount to return.
     * @return Returns  with operation info serialized to JSON.
     */
    return(orderid: string | null, amount: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/return?";
        if (orderid === undefined)
            throw new Error("The parameter 'orderid' must be defined.");
        else if(orderid !== null)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        if (amount === undefined || amount === null)
            throw new Error("The parameter 'amount' must be defined and cannot be null.");
        else
            url_ += "amount=" + encodeURIComponent("" + amount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReturn(_response);
        });
    }

    protected processReturn(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Proceeds a cancel operation for order with specified Id.
     * @param orderid The order Id.
     * @return Returns  with operation info serialized to JSON.
     */
    cancel(orderid: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/cancel?";
        if (orderid === undefined)
            throw new Error("The parameter 'orderid' must be defined.");
        else if(orderid !== null)
            url_ += "orderid=" + encodeURIComponent("" + orderid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ProductsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets products filtered by query parameters
     * @param repositoryName (optional) Parameter that is used with the query name to do a search
     * @param queryName (optional) Parameter that is used with the repository name to do a search
     * @param groupId (optional) Parameter that can be used for getting all products in a specific group
     * @param request Parameters
     * @return Products matching the parameters
     */
    getAll(repositoryName: string | null | undefined, queryName: string | null | undefined, groupId: string | null | undefined, request: ProductListViewModelSettings | null): Promise<ProductListViewModel> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/products?";
        if (repositoryName !== undefined && repositoryName !== null)
            url_ += "RepositoryName=" + encodeURIComponent("" + repositoryName) + "&";
        if (queryName !== undefined && queryName !== null)
            url_ += "QueryName=" + encodeURIComponent("" + queryName) + "&";
        if (groupId !== undefined && groupId !== null)
            url_ += "GroupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ProductListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductListViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No matching products found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductListViewModel>(<any>null);
    }

    /**
     * Gets a product by it's id.
     * @param id ProductId
     * @param priceSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param manufacturerSettings (optional) Configures how manufacturer view should be configured.
     * @param categoryFieldSettings (optional) The category field settings
     * @param productFieldSettings (optional) The product field settings
     * @param variantInfoSettings (optional) The variant info settings
     * @param groupInfoSettings (optional) The group info settings
     * @param assetCategorySettings (optional) The asset category settings
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     * @return Product matching the id
     */
    getProduct(id: string | null, priceSettings: PriceViewModelSettings | null | undefined, mediaSettings: MediaViewModelSettings | null | undefined, manufacturerSettings: ManufacturerViewModelSettings | null | undefined, categoryFieldSettings: CategoryFieldViewModelSetting | null | undefined, productFieldSettings: FieldValueViewModelSetting | null | undefined, variantInfoSettings: VariantInfoViewModelSettings | null | undefined, groupInfoSettings: GroupInfoViewModelSettings | null | undefined, assetCategorySettings: AssetCategoryViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<ProductViewModel> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/products/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (priceSettings !== undefined && priceSettings !== null)
            url_ += "PriceSettings=" + encodeURIComponent("" + priceSettings) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (manufacturerSettings !== undefined && manufacturerSettings !== null)
            url_ += "ManufacturerSettings=" + encodeURIComponent("" + manufacturerSettings) + "&";
        if (categoryFieldSettings !== undefined && categoryFieldSettings !== null)
            url_ += "CategoryFieldSettings=" + encodeURIComponent("" + categoryFieldSettings) + "&";
        if (productFieldSettings !== undefined && productFieldSettings !== null)
            url_ += "ProductFieldSettings=" + encodeURIComponent("" + productFieldSettings) + "&";
        if (variantInfoSettings !== undefined && variantInfoSettings !== null)
            url_ += "VariantInfoSettings=" + encodeURIComponent("" + variantInfoSettings) + "&";
        if (groupInfoSettings !== undefined && groupInfoSettings !== null)
            url_ += "GroupInfoSettings=" + encodeURIComponent("" + groupInfoSettings) + "&";
        if (assetCategorySettings !== undefined && assetCategorySettings !== null)
            url_ += "AssetCategorySettings=" + encodeURIComponent("" + assetCategorySettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProduct(_response);
        });
    }

    protected processGetProduct(response: Response): Promise<ProductViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No matching product found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductViewModel>(<any>null);
    }

    /**
     * Gets a product by it's id and variantid.
     * @param id ProductId
     * @param variantId VariantId
     * @param priceSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param manufacturerSettings (optional) Configures how manufacturer view should be configured.
     * @param categoryFieldSettings (optional) The category field settings
     * @param productFieldSettings (optional) The product field settings
     * @param variantInfoSettings (optional) The variant info settings
     * @param groupInfoSettings (optional) The group info settings
     * @param assetCategorySettings (optional) The asset category settings
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     * @return Product matching the id and variantid
     */
    getProduct2(id: string | null, variantId: string | null, priceSettings: PriceViewModelSettings | null | undefined, mediaSettings: MediaViewModelSettings | null | undefined, manufacturerSettings: ManufacturerViewModelSettings | null | undefined, categoryFieldSettings: CategoryFieldViewModelSetting | null | undefined, productFieldSettings: FieldValueViewModelSetting | null | undefined, variantInfoSettings: VariantInfoViewModelSettings | null | undefined, groupInfoSettings: GroupInfoViewModelSettings | null | undefined, assetCategorySettings: AssetCategoryViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<ProductViewModel> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/products/{id}/{variantId}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (variantId === undefined || variantId === null)
            throw new Error("The parameter 'variantId' must be defined.");
        url_ = url_.replace("{variantId}", encodeURIComponent("" + variantId));
        if (priceSettings !== undefined && priceSettings !== null)
            url_ += "PriceSettings=" + encodeURIComponent("" + priceSettings) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (manufacturerSettings !== undefined && manufacturerSettings !== null)
            url_ += "ManufacturerSettings=" + encodeURIComponent("" + manufacturerSettings) + "&";
        if (categoryFieldSettings !== undefined && categoryFieldSettings !== null)
            url_ += "CategoryFieldSettings=" + encodeURIComponent("" + categoryFieldSettings) + "&";
        if (productFieldSettings !== undefined && productFieldSettings !== null)
            url_ += "ProductFieldSettings=" + encodeURIComponent("" + productFieldSettings) + "&";
        if (variantInfoSettings !== undefined && variantInfoSettings !== null)
            url_ += "VariantInfoSettings=" + encodeURIComponent("" + variantInfoSettings) + "&";
        if (groupInfoSettings !== undefined && groupInfoSettings !== null)
            url_ += "GroupInfoSettings=" + encodeURIComponent("" + groupInfoSettings) + "&";
        if (assetCategorySettings !== undefined && assetCategorySettings !== null)
            url_ += "AssetCategorySettings=" + encodeURIComponent("" + assetCategorySettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProduct2(_response);
        });
    }

    protected processGetProduct2(response: Response): Promise<ProductViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No matching product found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductViewModel>(<any>null);
    }

    /**
     * Gets all related products of a product.
     * @param id ProductId
     * @param productSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param groupSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param facetGroupSettings (optional) Configures how the facetgroups view should be configured, if they are used to fill the list.
     * @param parameters (optional) Additional parameters to be used for the creation of the product list.
     * @param pageSize (optional) Limits the number of products in the returned view
     * @param currentPage (optional) Defines which page of the paginated resultset to return. Eg. PageSize of 10 and CurrentPage of 2 in a resultset of 30, returns result item #11 to #20.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     * @return Related products of the product matching the id
     */
    related(id: string | null, productSettings: ProductViewModelSettings | null | undefined, groupSettings: ProductGroupViewModelSettings | null | undefined, facetGroupSettings: FacetGroupViewModelSettings | null | undefined, parameters: { [key: string]: string; } | null | undefined, pageSize: number | undefined, currentPage: number | undefined, mediaSettings: MediaViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<ProductListViewModel> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/products/{id}/related?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (productSettings !== undefined && productSettings !== null)
            url_ += "ProductSettings=" + encodeURIComponent("" + productSettings) + "&";
        if (groupSettings !== undefined && groupSettings !== null)
            url_ += "GroupSettings=" + encodeURIComponent("" + groupSettings) + "&";
        if (facetGroupSettings !== undefined && facetGroupSettings !== null)
            url_ += "FacetGroupSettings=" + encodeURIComponent("" + facetGroupSettings) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "Parameters=" + encodeURIComponent("" + parameters) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (currentPage === null)
            throw new Error("The parameter 'currentPage' cannot be null.");
        else if (currentPage !== undefined)
            url_ += "CurrentPage=" + encodeURIComponent("" + currentPage) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRelated(_response);
        });
    }

    protected processRelated(response: Response): Promise<ProductListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ProductListViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No matching related products found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductListViewModel>(<any>null);
    }
}

export class FeedClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    verifyConnection(): Promise<boolean> {
        let url_ = this.baseUrl + "/dwapi/Feed/VerifyConnection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVerifyConnection(_response);
        });
    }

    protected processVerifyConnection(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <boolean>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    getFeedOutput(id: number, languageId: string | null | undefined, currencyId: string | null | undefined, shopId: string | null | undefined, userId: string | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/dwapi/Feed/GetFeedOutput/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (currencyId !== undefined && currencyId !== null)
            url_ += "CurrencyId=" + encodeURIComponent("" + currencyId) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFeedOutput(_response);
        });
    }

    protected processGetFeedOutput(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ProductClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    verifyConnection(): Promise<boolean> {
        let url_ = this.baseUrl + "/dwapi/Product/VerifyConnection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVerifyConnection(_response);
        });
    }

    protected processVerifyConnection(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <boolean>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param productSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param groupSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param facetGroupSettings (optional) Configures how the facetgroups view should be configured, if they are used to fill the list.
     * @param parameters (optional) Additional parameters to be used for the creation of the product list.
     * @param pageSize (optional) Limits the number of products in the returned view
     * @param currentPage (optional) Defines which page of the paginated resultset to return. Eg. PageSize of 10 and CurrentPage of 2 in a resultset of 30, returns result item #11 to #20.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getProductList(productIds: string[] | null, productSettings: ProductViewModelSettings | null | undefined, groupSettings: ProductGroupViewModelSettings | null | undefined, facetGroupSettings: FacetGroupViewModelSettings | null | undefined, parameters: { [key: string]: string; } | null | undefined, pageSize: number | undefined, currentPage: number | undefined, mediaSettings: MediaViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/dwapi/Product/GetProductList?";
        if (productIds === undefined)
            throw new Error("The parameter 'productIds' must be defined.");
        else if(productIds !== null)
            productIds && productIds.forEach(item => { url_ += "productIds=" + encodeURIComponent("" + item) + "&"; });
        if (productSettings !== undefined && productSettings !== null)
            url_ += "ProductSettings=" + encodeURIComponent("" + productSettings) + "&";
        if (groupSettings !== undefined && groupSettings !== null)
            url_ += "GroupSettings=" + encodeURIComponent("" + groupSettings) + "&";
        if (facetGroupSettings !== undefined && facetGroupSettings !== null)
            url_ += "FacetGroupSettings=" + encodeURIComponent("" + facetGroupSettings) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "Parameters=" + encodeURIComponent("" + parameters) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (currentPage === null)
            throw new Error("The parameter 'currentPage' cannot be null.");
        else if (currentPage !== undefined)
            url_ += "CurrentPage=" + encodeURIComponent("" + currentPage) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductList(_response);
        });
    }

    protected processGetProductList(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param productSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param groupSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param facetGroupSettings (optional) Configures how the facetgroups view should be configured, if they are used to fill the list.
     * @param parameters (optional) Additional parameters to be used for the creation of the product list.
     * @param pageSize (optional) Limits the number of products in the returned view
     * @param currentPage (optional) Defines which page of the paginated resultset to return. Eg. PageSize of 10 and CurrentPage of 2 in a resultset of 30, returns result item #11 to #20.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getProductGroupList(groupId: string | null, productSettings: ProductViewModelSettings | null | undefined, groupSettings: ProductGroupViewModelSettings | null | undefined, facetGroupSettings: FacetGroupViewModelSettings | null | undefined, parameters: { [key: string]: string; } | null | undefined, pageSize: number | undefined, currentPage: number | undefined, mediaSettings: MediaViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/dwapi/Product/GetProductGroupList?";
        if (groupId === undefined)
            throw new Error("The parameter 'groupId' must be defined.");
        else if(groupId !== null)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        if (productSettings !== undefined && productSettings !== null)
            url_ += "ProductSettings=" + encodeURIComponent("" + productSettings) + "&";
        if (groupSettings !== undefined && groupSettings !== null)
            url_ += "GroupSettings=" + encodeURIComponent("" + groupSettings) + "&";
        if (facetGroupSettings !== undefined && facetGroupSettings !== null)
            url_ += "FacetGroupSettings=" + encodeURIComponent("" + facetGroupSettings) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "Parameters=" + encodeURIComponent("" + parameters) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (currentPage === null)
            throw new Error("The parameter 'currentPage' cannot be null.");
        else if (currentPage !== undefined)
            url_ += "CurrentPage=" + encodeURIComponent("" + currentPage) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductGroupList(_response);
        });
    }

    protected processGetProductGroupList(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * @param priceSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param manufacturerSettings (optional) Configures how manufacturer view should be configured.
     * @param categoryFieldSettings (optional) The category field settings
     * @param productFieldSettings (optional) The product field settings
     * @param variantInfoSettings (optional) The variant info settings
     * @param groupInfoSettings (optional) The group info settings
     * @param assetCategorySettings (optional) The asset category settings
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getProduct(productId: string | null, priceSettings: PriceViewModelSettings | null | undefined, mediaSettings: MediaViewModelSettings | null | undefined, manufacturerSettings: ManufacturerViewModelSettings | null | undefined, categoryFieldSettings: CategoryFieldViewModelSetting | null | undefined, productFieldSettings: FieldValueViewModelSetting | null | undefined, variantInfoSettings: VariantInfoViewModelSettings | null | undefined, groupInfoSettings: GroupInfoViewModelSettings | null | undefined, assetCategorySettings: AssetCategoryViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/dwapi/Product/GetProduct?";
        if (productId === undefined)
            throw new Error("The parameter 'productId' must be defined.");
        else if(productId !== null)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&";
        if (priceSettings !== undefined && priceSettings !== null)
            url_ += "PriceSettings=" + encodeURIComponent("" + priceSettings) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (manufacturerSettings !== undefined && manufacturerSettings !== null)
            url_ += "ManufacturerSettings=" + encodeURIComponent("" + manufacturerSettings) + "&";
        if (categoryFieldSettings !== undefined && categoryFieldSettings !== null)
            url_ += "CategoryFieldSettings=" + encodeURIComponent("" + categoryFieldSettings) + "&";
        if (productFieldSettings !== undefined && productFieldSettings !== null)
            url_ += "ProductFieldSettings=" + encodeURIComponent("" + productFieldSettings) + "&";
        if (variantInfoSettings !== undefined && variantInfoSettings !== null)
            url_ += "VariantInfoSettings=" + encodeURIComponent("" + variantInfoSettings) + "&";
        if (groupInfoSettings !== undefined && groupInfoSettings !== null)
            url_ += "GroupInfoSettings=" + encodeURIComponent("" + groupInfoSettings) + "&";
        if (assetCategorySettings !== undefined && assetCategorySettings !== null)
            url_ += "AssetCategorySettings=" + encodeURIComponent("" + assetCategorySettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProduct(_response);
        });
    }

    protected processGetProduct(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class VariantsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param priceSettings (optional) Configures how the price view should be configured, if price is filled.
     * @param mediaSettings (optional) Configures how multimedia content is handled.
     * @param manufacturerSettings (optional) Configures how manufacturer view should be configured.
     * @param categoryFieldSettings (optional) The category field settings
     * @param productFieldSettings (optional) The product field settings
     * @param variantInfoSettings (optional) The variant info settings
     * @param groupInfoSettings (optional) The group info settings
     * @param assetCategorySettings (optional) The asset category settings
     * @param userId (optional) User id that is to be used on any price-calculations.
     * @param showPricesWithVat (optional) Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not
     * @param currencyCode (optional) Currency code used in creation of product viewmodel. 
    Default: Currency marked as default.
     * @param countryCode (optional) Country code2 that is to be used for vat on any price-calculations.
     * @param shopId (optional) Shop id used in creation of product viewmodel.
     * @param languageId (optional) Id of the language used for creation of the product viewmodel.
    Default: Language marked as default.
     * @param filledProperties (optional) Filter for how much of a viewmodel that should be loaded. Default: Loads all properties.
     */
    getVariantInfo(productId: string | null, priceSettings: PriceViewModelSettings | null | undefined, mediaSettings: MediaViewModelSettings | null | undefined, manufacturerSettings: ManufacturerViewModelSettings | null | undefined, categoryFieldSettings: CategoryFieldViewModelSetting | null | undefined, productFieldSettings: FieldValueViewModelSetting | null | undefined, variantInfoSettings: VariantInfoViewModelSettings | null | undefined, groupInfoSettings: GroupInfoViewModelSettings | null | undefined, assetCategorySettings: AssetCategoryViewModelSettings | null | undefined, userId: number | undefined, showPricesWithVat: boolean | undefined, currencyCode: string | null | undefined, countryCode: string | null | undefined, shopId: string | null | undefined, languageId: string | null | undefined, filledProperties: string[] | null | undefined): Promise<VariantInfoViewModel | null> {
        let url_ = this.baseUrl + "/dwapi/ecommerce/variants/{productId}?";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        if (priceSettings !== undefined && priceSettings !== null)
            url_ += "PriceSettings=" + encodeURIComponent("" + priceSettings) + "&";
        if (mediaSettings !== undefined && mediaSettings !== null)
            url_ += "MediaSettings=" + encodeURIComponent("" + mediaSettings) + "&";
        if (manufacturerSettings !== undefined && manufacturerSettings !== null)
            url_ += "ManufacturerSettings=" + encodeURIComponent("" + manufacturerSettings) + "&";
        if (categoryFieldSettings !== undefined && categoryFieldSettings !== null)
            url_ += "CategoryFieldSettings=" + encodeURIComponent("" + categoryFieldSettings) + "&";
        if (productFieldSettings !== undefined && productFieldSettings !== null)
            url_ += "ProductFieldSettings=" + encodeURIComponent("" + productFieldSettings) + "&";
        if (variantInfoSettings !== undefined && variantInfoSettings !== null)
            url_ += "VariantInfoSettings=" + encodeURIComponent("" + variantInfoSettings) + "&";
        if (groupInfoSettings !== undefined && groupInfoSettings !== null)
            url_ += "GroupInfoSettings=" + encodeURIComponent("" + groupInfoSettings) + "&";
        if (assetCategorySettings !== undefined && assetCategorySettings !== null)
            url_ += "AssetCategorySettings=" + encodeURIComponent("" + assetCategorySettings) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (showPricesWithVat === null)
            throw new Error("The parameter 'showPricesWithVat' cannot be null.");
        else if (showPricesWithVat !== undefined)
            url_ += "ShowPricesWithVat=" + encodeURIComponent("" + showPricesWithVat) + "&";
        if (currencyCode !== undefined && currencyCode !== null)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (countryCode !== undefined && countryCode !== null)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (shopId !== undefined && shopId !== null)
            url_ += "ShopId=" + encodeURIComponent("" + shopId) + "&";
        if (languageId !== undefined && languageId !== null)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (filledProperties !== undefined && filledProperties !== null)
            filledProperties && filledProperties.forEach(item => { url_ += "FilledProperties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVariantInfo(_response);
        });
    }

    protected processGetVariantInfo(response: Response): Promise<VariantInfoViewModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <VariantInfoViewModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VariantInfoViewModel | null>(<any>null);
    }
}

/** ViewModelBase represents a view model that can be used for rendering templates using a model instead of template tags. Inherit from this base class to create a view model. */
export interface ViewModelBase {
}

export interface AreaInfoViewModel extends ViewModelBase {
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the created date. */
    CreatedDate?: Date;
    /** Gets or sets the updated date. */
    UpdatedDate?: Date;
    /** Gets or sets the item. */
    Item?: ItemViewModel | undefined;
    /** Gets or sets the languages. */
    Languages?: AreaLanguageViewModel[] | undefined;
    /** Default country used when browsing the website (used for VAT calculation) */
    EcomCountryCode?: string | undefined;
    /** Default currency used when browsing the website */
    EcomCurrencyCode?: string | undefined;
    /** Default language used when browsing the website */
    EcomLanguageId?: string | undefined;
    /** Default setting for if prices should be shown with or without VAT */
    EcomPricesWithVat?: boolean;
    /** Default shop id used when browsing the website */
    EcomShopId?: string | undefined;
}

/** ItemViewModel represents the rendering context used when an item is rendered. */
export interface ItemViewModel extends ViewModelBase {
    /** Gets or sets the fields. */
    Fields?: ItemFieldViewModel[] | undefined;
    /** Gets or sets the identifier. */
    Id?: string | undefined;
    /** Gets or sets the name of the system. */
    SystemName?: string | undefined;
    /** Gets or sets the page id. */
    PageID?: number;
    /** Gets or sets the paragraph id. */
    ParagraphID?: number;
    /** Gets or sets the link. */
    Link?: string | undefined;
}

/** ItemFieldViewModel represents the rendering context used when an item field is rendered. */
export interface ItemFieldViewModel extends ViewModelBase {
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the name of the system. */
    SystemName?: string | undefined;
    Value?: any | undefined;
}

/** AreaLanguageViewModel represents the rendering context used when an area language is rendered. */
export interface AreaLanguageViewModel extends ViewModelBase {
    /** Gets or sets the culture. */
    Culture?: string | undefined;
    /** Gets the first active page. */
    FirstActivePage?: PageReferenceViewModel | undefined;
    /** Gets the first page. */
    FirstPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets a value indicating whether this instance is current. */
    IsCurrent?: boolean;
    /** Gets or sets a value indicating whether this instance is master. */
    IsMaster?: boolean;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the primary domain. */
    PrimaryDomain?: string | undefined;
}

/** PageReferenceViewModel represents the rendering context used when a page reference is rendered. */
export interface PageReferenceViewModel extends ViewModelBase {
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the name. */
    Name?: string | undefined;
}

/** A fillable viewmodel is a defined as a model for frontend, that allows for specification of which properties should be filled/loaded. If a property is specified as "not filled" it will have near-zero cost on performance, as this data is simply not loaded. */
export interface FillableViewModelBase extends ViewModelBase {
}

export interface GroupInfoViewModel extends FillableViewModelBase {
    Id?: string | undefined;
    Name?: string | undefined;
}

export interface ProductGroupViewModel extends GroupInfoViewModel {
    Id?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;
    Number?: string | undefined;
    Description?: string | undefined;
    CategorySystemName?: string | undefined;
    CategoryName?: string | undefined;
    GroupFields?: FieldValueViewModel[] | undefined;
    Assets?: MediaViewModel[] | undefined;
}

export interface FieldValueViewModel extends FillableViewModelBase {
    SystemName?: string | undefined;
    Name?: string | undefined;
    Type?: string | undefined;
    Value?: any | undefined;
}

export interface MediaViewModel extends FillableViewModelBase {
    Value?: string | undefined;
    Name?: string | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfMediaViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

export interface MediaViewModelSettings extends ViewSettingsBaseOfMediaViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfFieldValueViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** The product field model settings */
export interface FieldValueViewModelSetting extends ViewSettingsBaseOfFieldValueViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfProductViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfProductViewModel extends ViewSettingsBaseOfProductViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfProductViewModel extends ViewSettingsLanguageBaseOfProductViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

/** Configuration of how a product viewmodel should be created. */
export interface ProductViewModelSettings extends ViewSettingsBaseCurrencyBaseOfProductViewModel {
    /** Configures how the price view should be configured, if price is filled. */
    PriceSettings?: PriceViewModelSettings | undefined;
    /** Configures how multimedia content is handled. */
    MediaSettings?: MediaViewModelSettings | undefined;
    /** Configures how manufacturer view should be configured. */
    ManufacturerSettings?: ManufacturerViewModelSettings | undefined;
    /** The category field settings */
    CategoryFieldSettings?: CategoryFieldViewModelSetting | undefined;
    /** The product field settings */
    ProductFieldSettings?: FieldValueViewModelSetting | undefined;
    /** The variant info settings */
    VariantInfoSettings?: VariantInfoViewModelSettings | undefined;
    /** The group info settings */
    GroupInfoSettings?: GroupInfoViewModelSettings | undefined;
    /** The asset category settings */
    AssetCategorySettings?: AssetCategoryViewModelSettings | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfPriceViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfPriceViewModel extends ViewSettingsBaseOfPriceViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfPriceViewModel extends ViewSettingsLanguageBaseOfPriceViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface PriceViewModelSettings extends ViewSettingsBaseCurrencyBaseOfPriceViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfManufacturerViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfManufacturerViewModel extends ViewSettingsBaseOfManufacturerViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

export interface ManufacturerViewModelSettings extends ViewSettingsLanguageBaseOfManufacturerViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfCategoryFieldViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** The category field model settings */
export interface CategoryFieldViewModelSetting extends ViewSettingsBaseOfCategoryFieldViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfVariantInfoViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfVariantInfoViewModel extends ViewSettingsBaseOfVariantInfoViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfVariantInfoViewModel extends ViewSettingsLanguageBaseOfVariantInfoViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface VariantInfoViewModelSettings extends ViewSettingsBaseCurrencyBaseOfVariantInfoViewModel {
    /** Configures how the price view should be configured, if price is filled. */
    PriceSettings?: PriceViewModelSettings | undefined;
    /** Configures how multimedia content is handled. */
    MediaSettings?: MediaViewModelSettings | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfGroupInfoViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfGroupInfoViewModel extends ViewSettingsBaseOfGroupInfoViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfGroupInfoViewModel extends ViewSettingsLanguageBaseOfGroupInfoViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface GroupInfoViewModelSettings extends ViewSettingsBaseCurrencyBaseOfGroupInfoViewModel {
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfAssetCategoryViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfAssetCategoryViewModel extends ViewSettingsBaseOfAssetCategoryViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

export interface AssetCategoryViewModelSettings extends ViewSettingsLanguageBaseOfAssetCategoryViewModel {
    MediaSettings?: MediaViewModelSettings | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfProductGroupViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfProductGroupViewModel extends ViewSettingsBaseOfProductGroupViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfProductGroupViewModel extends ViewSettingsLanguageBaseOfProductGroupViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface ProductGroupViewModelSettings extends ViewSettingsBaseCurrencyBaseOfProductGroupViewModel {
    /** Configures how multimedia content is handled. */
    MediaSettings?: MediaViewModelSettings | undefined;
    /** The product field settings */
    FieldSettings?: FieldValueViewModelSetting | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfFacetGroupViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfFacetGroupViewModel extends ViewSettingsBaseOfFacetGroupViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfFacetGroupViewModel extends ViewSettingsLanguageBaseOfFacetGroupViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface FacetGroupViewModelSettings extends ViewSettingsBaseCurrencyBaseOfFacetGroupViewModel {
    /** Configures how the facet view should be loaded. */
    FacetSettings?: FacetViewModelSettings | undefined;
    FacetGroupNames?: string[] | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfFacetViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfFacetViewModel extends ViewSettingsBaseOfFacetViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfFacetViewModel extends ViewSettingsLanguageBaseOfFacetViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface FacetViewModelSettings extends ViewSettingsBaseCurrencyBaseOfFacetViewModel {
    /** Configures how the facet option view should be loaded. */
    FacetOptionSettings?: FacetOptionViewModelSettings | undefined;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfFacetOptionViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfFacetOptionViewModel extends ViewSettingsBaseOfFacetOptionViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfFacetOptionViewModel extends ViewSettingsLanguageBaseOfFacetOptionViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface FacetOptionViewModelSettings extends ViewSettingsBaseCurrencyBaseOfFacetOptionViewModel {
}

/** Represents a navigation tree for use in a rendering context. */
export interface NavigationTreeViewModel extends ViewModelBase {
    /** Gets the sub nodes (children) to the root node. */
    Nodes?: NavigationTreeNodeViewModel[] | undefined;
    /** Gets the collection of custom parameters. */
    Parameters?: { [key: string]: any; } | undefined;
}

/** Represents a navigation node in a NavigationTreeViewModel. */
export interface NavigationTreeNodeViewModel extends ViewModelBase {
    /** Gets or sets the pageid of the page that this navigation node represents. */
    PageId?: number;
    /** Gets or sets the group id of the ecommerce group that this navigation node represents. */
    GroupId?: string | undefined;
    /** Gets or sets the name of node - the page name, group name etc. */
    Name?: string | undefined;
    /** Gets or sets the link of the node, i.e /home/products or /products/bikes/mountain-bike. */
    Link?: string | undefined;
    /** Gets or sets the level of the node in the navigation tree relative to the root. */
    Level?: number;
    /** Gets or sets a value indicating whether the node should be clickable (link). */
    IsClickable?: boolean;
    /** Gets or sets a value indicating whether node is in path. */
    InPath?: boolean;
    /** Gets or sets a value indicating whether this node is active. */
    IsActive?: boolean;
    /** Gets the sub nodes (or subpages) to this navigation node. */
    Nodes?: NavigationTreeNodeViewModel[] | undefined;
}

/** Defines which pages in the navigation tree to include in the generated navigation. */
export enum ExpandMode {
    None = "None",
    All = "All",
    Path = "Path",
    PathOnly = "PathOnly",
}

/** Represents a page. */
export interface PageInfoViewModel extends ViewModelBase {
    ID?: number;
    Name?: string | undefined;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    Title?: string | undefined;
    Description?: string | undefined;
    Keywords?: string | undefined;
    AreaID?: number;
    Path?: PageReferenceViewModel[] | undefined;
    Languages?: PageLanguageViewModel[] | undefined;
    Item?: ItemViewModel | undefined;
    PropertyItem?: ItemViewModel | undefined;
}

/** PageLanguageViewModel represents the rendering context used when a page language is rendered. */
export interface PageLanguageViewModel extends ViewModelBase {
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the culture. */
    Culture?: string | undefined;
    /** Gets or sets the primary domain. */
    PrimaryDomain?: string | undefined;
    /** Gets or sets a value indicating whether this instance is current. */
    IsCurrent?: boolean;
    /** Gets or sets a value indicating whether this instance is master. */
    IsMaster?: boolean;
    /** Gets or sets the page. */
    Page?: PageReferenceViewModel | undefined;
    /** Gets or sets a value indicating whether [page is hidden]. */
    PageIsHidden?: boolean;
    /** Gets or sets a value indicating whether [page is published]. */
    PageIsPublished?: boolean;
    /** Gets or sets the first page. */
    FirstPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the first active page. */
    FirstActivePage?: PageReferenceViewModel | undefined;
}

/** PageViewModel represents the rendering context used when a page is rendered. */
export interface PageViewModel extends ViewModelBase {
    /** Gets or sets the area. */
    Area?: AreaViewModel | undefined;
    /** Gets or sets the created date. */
    CreatedDate?: Date;
    /** Gets or sets the current secondary user. */
    CurrentSecondaryUser?: UserViewModel | undefined;
    /** Gets or sets the current user. */
    CurrentUser?: UserViewModel | undefined;
    /** Gets a boolean that indicates if the current user, anonymous or not, has access to the current page. GetLogonDialog */
    IsCurrentUserAllowed?: boolean;
    /** Gets or sets the current cart. */
    Cart?: CartViewModel | undefined;
    /** Gets or sets the content as a dictionary of content placeholder ids (key) and its content html (the value). */
    Content?: { [key: string]: string; } | undefined;
    GridContent?: { [key: string]: string; } | undefined;
    /** Gets or sets the description. */
    Description?: string | undefined;
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the item. */
    Item?: ItemViewModel | undefined;
    /** Gets or sets the item identifier. */
    ItemId?: string | undefined;
    /** Gets or sets the type of the item. */
    ItemType?: string | undefined;
    /** Gets or sets the keywords. */
    Keywords?: string | undefined;
    /** Gets or sets the meta tags. */
    MetaTags?: string | undefined;
    /** Gets or sets the languages. */
    Languages?: PageLanguageViewModel[] | undefined;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the path. */
    Path?: PageReferenceViewModel[] | undefined;
    /** Gets or sets the property item. */
    PropertyItem?: ItemViewModel | undefined;
    /** Gets or sets the property item identifier. */
    PropertyItemId?: string | undefined;
    /** Gets or sets the type of the property item. */
    PropertyItemType?: string | undefined;
    /** Gets or sets a value indicating whether to show updated date. */
    ShowUpdatedDate?: boolean;
    /** Gets or sets the title. */
    Title?: string | undefined;
    /** Gets or sets the top page. */
    TopPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the updated date. */
    UpdatedDate?: Date;
    /** Gets or sets the secondary users. */
    SecondaryUsers?: UserViewModel[] | undefined;
    /** Gets or sets log on failed state. */
    LogOnFailed?: boolean;
    /** Gets or sets log on failed reason. */
    LogOnFailedReason?: LogOnFailedReason;
}

/** AreaViewModel represents the rendering context used when an area is rendered. */
export interface AreaViewModel extends ViewModelBase {
    /** Gets or sets the cart page. */
    CartPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the created date. */
    CreatedDate?: Date;
    /** Gets or sets the date format. */
    DateFormat?: string | undefined;
    /** Gets or sets the first active page. */
    FirstActivePage?: PageReferenceViewModel | undefined;
    /** Gets or sets the first page. */
    FirstPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the item. */
    Item?: ItemViewModel | undefined;
    /** Gets or sets the item identifier. */
    ItemId?: string | undefined;
    /** Gets or sets the type of the item. */
    ItemType?: string | undefined;
    /** Gets or sets the languages. */
    Languages?: AreaLanguageViewModel[] | undefined;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the search page. */
    SearchPage?: PageReferenceViewModel | undefined;
    /** Gets or sets the updated date. */
    UpdatedDate?: Date;
}

/** UserViewModel represents the rendering context used when a user is rendered. */
export interface UserViewModel extends ViewModelBase {
    /** Gets or sets the address. */
    Address?: string | undefined;
    /** Gets or sets the address2. */
    Address2?: string | undefined;
    /** Gets or sets the city. */
    City?: string | undefined;
    /** Gets or sets the company. */
    Company?: string | undefined;
    /** Gets or sets the country. */
    Country?: string | undefined;
    /** Gets or sets the customer number. */
    CustomerNumber?: string | undefined;
    /** Gets or sets the department. */
    Department?: string | undefined;
    /** Gets or sets the email. */
    Email?: string | undefined;
    /** Gets or sets the first name. */
    FirstName?: string | undefined;
    /** Gets or sets the house number. */
    HouseNumber?: string | undefined;
    /** Gets or sets the identifier. */
    ID?: number;
    /** Gets or sets the image. */
    Image?: string | undefined;
    /** Gets or sets the job title. */
    JobTitle?: string | undefined;
    /** Gets or sets the last name. */
    LastName?: string | undefined;
    /** Gets or sets the name of the middle. */
    MiddleName?: string | undefined;
    /** Gets or sets the name. */
    Name?: string | undefined;
    /** Gets or sets the phone. */
    Phone?: string | undefined;
    /** Gets or sets the phone business. */
    PhoneBusiness?: string | undefined;
    /** Gets or sets the phone mobile. */
    PhoneMobile?: string | undefined;
    /** Gets or sets the phone private. */
    PhonePrivate?: string | undefined;
    /** Gets or sets the state. */
    State?: string | undefined;
    /** Gets or sets the title. */
    Title?: string | undefined;
    /** Gets or sets the name of the user. */
    UserName?: string | undefined;
    /** Gets or sets the zip. */
    Zip?: string | undefined;
    /** Gets the external identifier. */
    ExternalID?: string | undefined;
}

/** CartViewModel represents the rendering context used when a cart is rendered. */
export interface CartViewModel extends ViewModelBase {
    /** Gets or sets the identifier. */
    ID?: string | undefined;
    /** Gets or sets the number of products in the cart. */
    ProductsCount?: number;
    /** Gets or sets the total count of products in the cart. */
    TotalProductsCount?: number;
    /** Gets or sets the number of orderlines in the cart. */
    OrderlinesCount?: number;
    /** Gets or sets the current cart orderlines. */
    CartOrderlines?: CartOrderlineViewModel[] | undefined;
    TotalPrice?: PriceViewModel | undefined;
    TotalDiscount?: PriceViewModel | undefined;
    TotalPriceWithoutDiscounts?: PriceViewModel | undefined;
    TotalPriceWithoutFees?: PriceViewModel | undefined;
    /** Gets or sets the payment method. */
    PaymentMethod?: string | undefined;
    /** Gets or sets the price viewmodel for payment fee. */
    PaymentFee?: PriceViewModel | undefined;
    /** Gets or sets the shipping method. */
    ShippingMethod?: string | undefined;
    /** Gets or sets the price viewmodel for shipping fee. */
    ShippingFee?: PriceViewModel | undefined;
    /** Gets or sets the whether the cart is empty. */
    IsEmpty?: boolean;
}

/** CartOrderlineViewModel represents the rendering context used when a CartOrderline is rendered. */
export interface CartOrderlineViewModel extends ViewModelBase {
    /** Gets or sets the product ID. */
    ProductID?: string | undefined;
    /** Gets or sets the product number. */
    ProductNumber?: string | undefined;
    /** Gets or sets the product name. */
    ProductName?: string | undefined;
    /** Gets or sets the product primary or default group id. */
    ProductGroupID?: string | undefined;
    /** Gets or sets if the orderline is a product. */
    IsProduct?: boolean;
    /** Gets or sets if the orderline is a discount. */
    IsDiscount?: boolean;
    /** Gets or sets if the orderline is a tax. */
    IsTax?: boolean;
    /** Gets or sets the quantity. */
    Quantity?: number;
    /** Gets or sets the product variantID. */
    ProductVariantID?: string | undefined;
    /** Gets or sets the product variant text. */
    ProductVariantText?: string | undefined;
    /** Gets or sets the product link. */
    ProductLink?: string | undefined;
    ProductImage?: string | undefined;
    /** Gets or sets the price viewmodel for unit price. */
    UnitPrice?: PriceViewModel | undefined;
    /** Gets or sets the price viewmodel for unit price before custom discount. */
    UnitPriceBeforeDiscount?: PriceViewModel | undefined;
    /** Gets or sets the price viewmodel for total price. */
    TotalPrice?: PriceViewModel | undefined;
    /** Gets or sets the price viewmodel for total discount. */
    TotalDiscount?: PriceViewModel | undefined;
    /** Gets or sets the unit id. */
    UnitId?: string | undefined;
    /** Gets or sets the unit name. */
    UnitName?: string | undefined;
    /** Gets or sets the total points. */
    PointsTotal?: number;
    /** Gets or sets the point price. */
    PointPrice?: number;
    /** Gets or sets the id of the orderline. */
    ID?: string | undefined;
}

export interface PriceViewModel {
    /** Gets or sets the price. */
    Price?: PriceInfo | undefined;
    /** Gets or sets the price with vat. */
    PriceWithVat?: PriceInfo | undefined;
    /** Gets or sets the price with vat. */
    PriceWithoutVat?: PriceInfo | undefined;
    /** Gets or sets the vat. */
    Vat?: PriceInfo | undefined;
    /** Gets or sets the vat percentage. */
    VatPercent?: VatInfo | undefined;
    /** Gets or sets the currency. */
    Currency?: CurrencyInfo | undefined;
}

export interface PriceInfo {
    /** Gets or sets the price . */
    Value?: number;
    /** Gets or sets the formatted price. */
    Formatted?: string | undefined;
    /** Gets or sets the formatted price without symbol. */
    FormattedNoSymbol?: string | undefined;
}

export interface VatInfo {
    /** Gets or sets the vat percentage. */
    Percent?: number;
    /** Gets or sets the formatted vat percentage. */
    PercentFormatted?: string | undefined;
}

export interface CurrencyInfo {
    /** Gets or sets the currency symbol. */
    Symbol?: string | undefined;
    /** Gets or sets the currency name. */
    Name?: string | undefined;
    /** Gets or sets the currency rate. */
    Rate?: number;
}

export enum LogOnFailedReason {
    Undefined = "Undefined",
    IncorrectLogin = "IncorrectLogin",
    PasswordLengthInvalid = "PasswordLengthInvalid",
    PasswordExpired = "PasswordExpired",
    ExceededFailedLogOnLimit = "ExceededFailedLogOnLimit",
    LoginLocked = "LoginLocked",
}

/** Represents a paragraph. */
export interface ParagraphInfoViewModel extends ViewModelBase {
    ID?: number;
    Name?: string | undefined;
    CreatedDate?: Date;
    UpdatedDate?: Date;
    PageID?: number;
    GlobalID?: number;
    Text?: string | undefined;
    Item?: ItemViewModel | undefined;
    Image?: string | undefined;
    ImageFocalX?: number;
    ImageFocalY?: number;
    ImageHAlign?: string | undefined;
    ImageVAlign?: string | undefined;
    ImageLink?: string | undefined;
    ImageAlt?: string | undefined;
    ImageLinkTarget?: string | undefined;
    ImageCaption?: string | undefined;
}

export interface ProductListViewModel extends FillableViewModelBase {
    Group?: ProductGroupViewModel | undefined;
    SubGroups?: ProductGroupViewModel[] | undefined;
    Products?: ProductViewModel[] | undefined;
    /** Gets or sets the items count per page. */
    PageSize?: number;
    /** Gets or sets the count of pages.
If this value is greater than 0, the view model result will be paginated, otherwise, plain list. */
    PageCount?: number;
    /** Gets or sets the current page number. */
    CurrentPage?: number;
    /** Gets or sets the total number of products in the list. */
    TotalProductsCount?: number;
    /** Gets or sets the collection of suggestions from a spell checker. */
    SpellCheckerSuggestions?: string[] | undefined;
    FacetGroups?: FacetGroupViewModel[] | undefined;
}

export interface ProductViewModel extends FillableViewModelBase {
    Id?: string | undefined;
    VariantId?: string | undefined;
    LanguageId?: string | undefined;
    Name?: string | undefined;
    Title?: string | undefined;
    ShortDescription?: string | undefined;
    LongDescription?: string | undefined;
    Number?: string | undefined;
    Created?: Date | undefined;
    Updated?: Date | undefined;
    Keywords?: string | undefined;
    Weight?: number | undefined;
    StockLevel?: number | undefined;
    Width?: number | undefined;
    Height?: number | undefined;
    Depth?: number | undefined;
    EAN?: string | undefined;
    ExpectedDelivery?: Date | undefined;
    Discontinued?: boolean;
    DiscontinuedAction?: number;
    PointPrice?: number | undefined;
    DefaultUnitId?: string | undefined;
    /** Gets or sets the rating of the product. */
    Rating?: number | undefined;
    ReplacementProduct?: ProductInfoViewModel | undefined;
    Price?: PriceViewModel2 | undefined;
    PriceInformative?: PriceViewModel2 | undefined;
    PriceBeforeDiscount?: PriceViewModel2 | undefined;
    Discount?: PriceViewModel2 | undefined;
    ProductFields?: { [key: string]: FieldValueViewModel; } | undefined;
    ProductCategories?: { [key: string]: CategoryFieldViewModel; } | undefined;
    Groups?: GroupInfoViewModel[] | undefined;
    PrimaryOrDefaultGroup?: GroupInfoViewModel | undefined;
    VariantInfo?: VariantInfoViewModel | undefined;
    DefaultImage?: MediaViewModel | undefined;
    GroupPaths?: GroupInfoViewModel[][] | undefined;
    ImagePatternImages?: MediaViewModel[] | undefined;
    Manufacturer?: ManufacturerViewModel | undefined;
    AssetCategories?: AssetCategoryViewModel[] | undefined;
}

export interface ProductInfoViewModel extends FillableViewModelBase {
    ProductId?: string | undefined;
    VariantId?: string | undefined;
    Name?: string | undefined;
    Number?: string | undefined;
}

export interface PriceViewModel2 extends FillableViewModelBase {
    ShowPricesWithVat?: boolean;
    Price?: number;
    PriceFormatted?: string | undefined;
    PriceWithoutVat?: number;
    PriceWithoutVatFormatted?: string | undefined;
    PriceWithVat?: number;
    PriceWithVatFormatted?: string | undefined;
    Vat?: number;
    VatFormatted?: string | undefined;
    VATPercent?: number;
    VATPercentFormatted?: string | undefined;
    CurrencyCode?: string | undefined;
}

export interface CategoryFieldViewModel extends FillableViewModelBase {
    Id?: string | undefined;
    Name?: string | undefined;
    Fields?: { [key: string]: FieldValueViewModel; } | undefined;
}

export interface VariantInfoViewModel extends FillableViewModelBase {
    ProductID?: string | undefined;
    VariantID?: string | undefined;
    OptionID?: string | undefined;
    OptionName?: string | undefined;
    OptionColor?: string | undefined;
    ProductName?: string | undefined;
    OptionImage?: MediaViewModel | undefined;
    Image?: MediaViewModel | undefined;
    Price?: PriceViewModel2 | undefined;
    PriceMin?: PriceViewModel2 | undefined;
    PriceMax?: PriceViewModel2 | undefined;
    Stock?: number;
    VariantInfo?: VariantInfoViewModel[] | undefined;
}

export interface ManufacturerViewModel extends FillableViewModelBase {
    Id?: string | undefined;
    Name?: string | undefined;
    Address?: string | undefined;
    ZipCode?: string | undefined;
    City?: string | undefined;
    Country?: string | undefined;
    Phone?: string | undefined;
    Fax?: string | undefined;
    Email?: string | undefined;
    Web?: string | undefined;
    Logo?: string | undefined;
    Description?: string | undefined;
}

export interface AssetCategoryViewModel extends FillableViewModelBase {
    Name?: string | undefined;
    SystemName?: string | undefined;
    InheritanceType?: InheritanceType;
    InheritanceTypeName?: string | undefined;
    ControlType?: DetailsGroupControlType;
    ControlTypeName?: string | undefined;
    Assets?: MediaViewModel[] | undefined;
}

/** The InheritanceType enumeration defines the different types of DetailsGroup instances the DetailsGroup class can represent. */
export enum InheritanceType {
    None = "None",
    Merge = "Merge",
    Fallback = "Fallback",
}

/** The enum DetailsGroupControlType enumerates types for asset category control */
export enum DetailsGroupControlType {
    FileSelector = "FileSelector",
    LinkSelector = "LinkSelector",
    Both = "Both",
}

export interface FacetGroupViewModel extends FillableViewModelBase {
    Name?: string | undefined;
    FacetGroupType?: string | undefined;
    Description?: string | undefined;
    Facets?: FacetViewModel[] | undefined;
}

export interface FacetViewModel extends FillableViewModelBase {
    Name?: string | undefined;
    QueryParameter?: string | undefined;
    QueryParameterType?: string | undefined;
    QueryParameterDefaultValue?: string | undefined;
    RenderType?: string | undefined;
    FacetField?: string | undefined;
    FacetType?: string | undefined;
    FacetValue?: string | undefined;
    Options?: FacetOptionViewModel[] | undefined;
    OptionCount?: number;
    OptionActiveCount?: number;
    OptionResultTotalCount?: number;
    MinimumFacetValue?: number;
    MaximumFacetValue?: number;
}

export interface FacetOptionViewModel extends FillableViewModelBase {
    Name?: string | undefined;
    Label?: string | undefined;
    Value?: string | undefined;
    Sort?: number;
    Selected?: boolean;
    Count?: number;
}

/** Configuration of which properties of a fillable viewmodel that should be loaded/filled. */
export interface ViewSettingsBaseOfProductListViewModel {
    /** Filter for how much of a viewmodel that should be loaded. Default: Loads all properties. */
    FilledProperties?: string[] | undefined;
}

/** Base configuration for views that require a language to be contructed. */
export interface ViewSettingsLanguageBaseOfProductListViewModel extends ViewSettingsBaseOfProductListViewModel {
    /** Id of the language used for creation of the product viewmodel.
Default: Language marked as default. */
    LanguageId?: string | undefined;
}

/** Base configuration for views that require a language and a currency code to be contructed. */
export interface ViewSettingsBaseCurrencyBaseOfProductListViewModel extends ViewSettingsLanguageBaseOfProductListViewModel {
    /** User id that is to be used on any price-calculations. */
    UserId?: number;
    /** Gets or sets a value that indicates if the price (display price) property of priceviewmodel should include vat or not */
    ShowPricesWithVat?: boolean;
    /** Currency code used in creation of product viewmodel. 
Default: Currency marked as default. */
    CurrencyCode?: string | undefined;
    /** Country code2 that is to be used for vat on any price-calculations. */
    CountryCode?: string | undefined;
    /** Shop id used in creation of product viewmodel. */
    ShopId?: string | undefined;
}

export interface ProductListViewModelSettings extends ViewSettingsBaseCurrencyBaseOfProductListViewModel {
    /** Configures how the price view should be configured, if price is filled. */
    ProductSettings?: ProductViewModelSettings | undefined;
    /** Configures how the price view should be configured, if price is filled. */
    GroupSettings?: ProductGroupViewModelSettings | undefined;
    /** Configures how the facetgroups view should be configured, if they are used to fill the list. */
    FacetGroupSettings?: FacetGroupViewModelSettings | undefined;
    /** Additional parameters to be used for the creation of the product list. */
    Parameters?: { [key: string]: string; } | undefined;
    /** Limits the number of products in the returned view */
    PageSize?: number;
    /** Defines which page of the paginated resultset to return. Eg. PageSize of 10 and CurrentPage of 2 in a resultset of 30, returns result item #11 to #20. */
    CurrentPage?: number;
    /** Configures how multimedia content is handled. */
    MediaSettings?: MediaViewModelSettings | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}